#include "common.hpp"
#include "domain.hpp"
#include "domain_extended.hpp"
#include "draw.hpp"
#include "mls.hpp"
#include "mlsm_operators.hpp"
#include "io.hpp"
#include <Eigen/Sparse>
#include <Eigen/SparseLU>

using namespace std;
using namespace mm;
using namespace Eigen;

template <template<class> class D>
void solve(D<Vec2d>& domain, VecXd& sol) {
    int N = domain.size();
    domain.findSupport(5);

    Range<int> internal = domain.types == INTERNAL,
                          boundary = domain.types == BOUNDARY;

    // Prepare operators and matrix
    NNGaussians<Vec2d> weight(1*domain.characteristicDistance());
    Monomials<Vec2d> mon5({{0,0},{0,1},{1,0},{2,0},{0,2}});
    EngineMLS<Vec2d, Monomials, NNGaussians> mls(mon5, domain.positions, weight);
    SparseMatrix<double> M(N, N);
    M.reserve(Range<int>(N, domain.support[0].size()));
    auto op = make_mlsm<mlsm::lap>(domain, mls, domain.types != 0);  // All nodes, including boundary
    Eigen::VectorXd rhs = Eigen::VectorXd::Zero(N);
    // Set equation on interior
    for (int i : internal) {
        op.lap(M, i, -1.0);  // laplace in interior
        rhs(i) = 1;
    }
    for (int i : boundary) {
        M.coeffRef(i, i) = 1;
        rhs(i) = 0;
    }
    M.makeCompressed();
    SparseLU<SparseMatrix<double>> solver;
//      BiCGSTAB<SparseMatrix<double>, IncompleteLUT<double>> solver;
//      solver.preconditioner().setDroptol(1e-5);
//      solver.preconditioner().setFillfactor(70);
//      solver.setMaxIterations(1000);
//      solver.setTolerance(1e-10);
    solver.compute(M);
    sol = solver.solve(rhs);
}

template <template<class> class D>
VectorXd solve3(D<Vec3d>& domain) {
    domain.findSupport(9);
    int N = domain.size();

    Range<int> internal = domain.types == INTERNAL,
                          boundary = domain.types == BOUNDARY;

    // Prepare operators and matrix
    NNGaussians<Vec3d> weight(1*domain.characteristicDistance());
    NNGaussians<Vec3d> basis(50*domain.characteristicDistance(), 9);
    EngineMLS<Vec3d, NNGaussians, NNGaussians> mls(basis, domain.positions, weight);
    SparseMatrix<double> M(N, N);
    M.reserve(Range<int>(N, domain.support[0].size()));
    auto op = make_mlsm<mlsm::lap>(domain, mls, domain.types != 0);  // All nodes, including boundary
    Eigen::VectorXd rhs = Eigen::VectorXd::Zero(N);
    // Set equation on interior
    for (int i : internal) {
        op.lap(M, i, -1.0);  // laplace in interior
        rhs(i) = 1;
    }
    for (int i : boundary) {
        M.coeffRef(i, i) = 1;
        rhs(i) = 0;
    }
    M.makeCompressed();
    SparseLU<SparseMatrix<double>> solver;
//      BiCGSTAB<SparseMatrix<double>, IncompleteLUT<double>> solver;
//      solver.preconditioner().setDroptol(1e-5);
//      solver.preconditioner().setFillfactor(70);
//      solver.setMaxIterations(1000);
//      solver.setTolerance(1e-10);
    solver.compute(M);
    return solver.solve(rhs);
}

template <template<class> class D>
void present(D<Vec2d>& domain, double rf=1e-2) {
    VecXd sol = VecXd::Zero(domain.size());
    std::thread th([&] () { draw2D(domain.positions, sol, 2); });
    domain.relax(6, rf, [](Vec2d) { return 1.0; }, 3, 200);
    solve(domain, sol);
    th.join();
}

CircleDomain<Vec2d> make_circle(double x, double y, double r,  double dy) {
    double f = 2*r/dy;
    CircleDomain<Vec2d> domain({x, y}, r);
    domain.fillUniform(M_PI/4*f*f, M_PI*f);
    return domain;
}

int main() {

    int n = 50;
    RectangleDomain<Vec2d> domain(0, 1);
    domain.fillUniformWithStep(1./n, 1./n);
    domain.findSupport(5);
    RectangleDomain<Vec2d> domain2(0.5, 1.1);
    domain2.fillUniformBoundaryWithStep(1./n);
    domain.subtract(domain2);

    vector<vector<double>> data = {{0, 0, 0.5}, {-0.2938926261462365, 0.4045084971874737, 0.3333333333333333}, {-0.6109114649112877, 0.5075141619791229, 0.2222222222222222}, {-0.8222573574213218, 0.4388437187846902, 0.14814814814814814}, {-0.9093366540572437, 0.318989349247661, 0.09876543209876543}, {-0.9093366540572437, 0.22022391714889555, 0.06584362139917695}, {-1.0032681618394812, 0.28846915227235753, 0.06584362139917695}, {-0.9631546190946778, 0.4846240142476454, 0.09876543209876543}, {-1.0570861268769152, 0.45410381727234195, 0.06584362139917695}, {-1.0212074835186258, 0.5645269272723316, 0.06584362139917695}, {-0.7415304098651705, 0.6872957162846668, 0.14814814814814814}, {-0.8824276715385265, 0.7330760117476219, 0.09876543209876543}, {-0.9763591793207639, 0.7025558147723185, 0.06584362139917695}, {-0.9404805359624745, 0.812978924772308, 0.06584362139917695}, {-0.7415304098651705, 0.8354438644328149, 0.09876543209876543}, {-0.7995832742891185, 0.915346777457501, 0.06584362139917695}, {-0.6834775454412225, 0.915346777457501, 0.06584362139917695}, {-0.2938926261462365, 0.737841830520807, 0.2222222222222222}, {-0.4245115711001194, 0.9176233848263509, 0.14814814814814814}, {-0.5654088327734754, 0.963403680289306, 0.09876543209876543}, {-0.6593403405557128, 0.9328834833140026, 0.06584362139917695}, {-0.6234616971974234, 1.0433065933139922, 0.06584362139917695}, {-0.4245115711001194, 1.065771532974499, 0.09876543209876543}, {-0.48256443552406736, 1.1456744459991852, 0.06584362139917695}, {-0.3664587066761714, 1.1456744459991852, 0.06584362139917695}, {-0.1632736811923536, 0.9176233848263509, 0.14814814814814814}, {-0.1632736811923536, 1.065771532974499, 0.09876543209876543}, {-0.22132654561630155, 1.1456744459991852, 0.06584362139917695}, {-0.10522081676840564, 1.1456744459991852, 0.06584362139917695}, {-0.022376419518997548, 0.963403680289306, 0.09876543209876543}, {0.035676444904950415, 1.0433065933139922, 0.06584362139917695}, {0.07155508826323984, 0.9328834833140026, 0.06584362139917695}, {0.29389262614623657, 0.4045084971874737, 0.3333333333333333}, {0.29389262614623657, 0.737841830520807, 0.2222222222222222}, {0.1632736811923537, 0.9176233848263509, 0.14814814814814814}, {0.02237641951899763, 0.963403680289306, 0.09876543209876543}, {-0.07155508826323977, 0.9328834833140026, 0.06584362139917695}, {-0.03567644490495032, 1.0433065933139922, 0.06584362139917695}, {0.1632736811923537, 1.065771532974499, 0.09876543209876543}, {0.10522081676840575, 1.1456744459991852, 0.06584362139917695}, {0.22132654561630166, 1.1456744459991852, 0.06584362139917695}, {0.4245115711001195, 0.9176233848263509, 0.14814814814814814}, {0.4245115711001195, 1.065771532974499, 0.09876543209876543}, {0.36645870667617153, 1.1456744459991852, 0.06584362139917695}, {0.48256443552406747, 1.1456744459991852, 0.06584362139917695}, {0.5654088327734755, 0.963403680289306, 0.09876543209876543}, {0.6234616971974235, 1.0433065933139922, 0.06584362139917695}, {0.6593403405557129, 0.9328834833140026, 0.06584362139917695}, {0.6109114649112877, 0.5075141619791228, 0.2222222222222222}, {0.7415304098651706, 0.6872957162846667, 0.14814814814814814}, {0.7415304098651706, 0.8354438644328148, 0.09876543209876543}, {0.6834775454412226, 0.915346777457501, 0.06584362139917695}, {0.7995832742891186, 0.915346777457501, 0.06584362139917695}, {0.8824276715385266, 0.7330760117476218, 0.09876543209876543}, {0.9404805359624746, 0.812978924772308, 0.06584362139917695}, {0.976359179320764, 0.7025558147723184, 0.06584362139917695}, {0.8222573574213218, 0.4388437187846901, 0.14814814814814814}, {0.9631546190946778, 0.48462401424764523, 0.09876543209876543}, {1.0212074835186258, 0.5645269272723314, 0.06584362139917695}, {1.0570861268769152, 0.4541038172723418, 0.06584362139917695}, {0.9093366540572437, 0.31898934924766087, 0.09876543209876543}, {1.0032681618394812, 0.2884691522723574, 0.06584362139917695}, {0.9093366540572437, 0.22022391714889544, 0.06584362139917695}};

//      data = {{0, 0, 0.5}, {-0.2938926261462365, 0.4045084971874737, 0.3333333333333333}, {-0.6109114649112877, 0.5075141619791229, 0.2222222222222222}, {-0.8222573574213218, 0.4388437187846902, 0.14814814814814814}, {-0.7415304098651705, 0.6872957162846668, 0.14814814814814814}, {-0.2938926261462365, 0.737841830520807, 0.2222222222222222}, {-0.4245115711001194, 0.9176233848263509, 0.14814814814814814}, {-0.1632736811923536, 0.9176233848263509, 0.14814814814814814}, {0.29389262614623657, 0.4045084971874737, 0.3333333333333333}, {0.29389262614623657, 0.737841830520807, 0.2222222222222222}, {0.1632736811923537, 0.9176233848263509, 0.14814814814814814}, {0.4245115711001195, 0.9176233848263509, 0.14814814814814814}, {0.6109114649112877, 0.5075141619791228, 0.2222222222222222}, {0.7415304098651706, 0.6872957162846667, 0.14814814814814814}, {0.8222573574213218, 0.4388437187846901, 0.14814814814814814}};

//      data = {{0, 0, 0.5}, {-0.2938926261462365, 0.4045084971874737, 0.3333333333333333}, {-0.6109114649112877, 0.5075141619791229, 0.2222222222222222}, {-0.8222573574213218, 0.4388437187846902, 0.14814814814814814}, {-0.9093366540572437, 0.318989349247661, 0.09876543209876543}, {-0.9631546190946778, 0.4846240142476454, 0.09876543209876543}, {-0.7415304098651705, 0.6872957162846668, 0.14814814814814814}, {-0.8824276715385265, 0.7330760117476219, 0.09876543209876543}, {-0.7415304098651705, 0.8354438644328149, 0.09876543209876543}, {-0.2938926261462365, 0.737841830520807, 0.2222222222222222}, {-0.4245115711001194, 0.9176233848263509, 0.14814814814814814}, {-0.5654088327734754, 0.963403680289306, 0.09876543209876543}, {-0.4245115711001194, 1.065771532974499, 0.09876543209876543}, {-0.1632736811923536, 0.9176233848263509, 0.14814814814814814}, {-0.1632736811923536, 1.065771532974499, 0.09876543209876543}, {-0.022376419518997548, 0.963403680289306, 0.09876543209876543}, {0.29389262614623657, 0.4045084971874737, 0.3333333333333333}, {0.29389262614623657, 0.737841830520807, 0.2222222222222222}, {0.1632736811923537, 0.9176233848263509, 0.14814814814814814}, {0.02237641951899763, 0.963403680289306, 0.09876543209876543}, {0.1632736811923537, 1.065771532974499, 0.09876543209876543}, {0.4245115711001195, 0.9176233848263509, 0.14814814814814814}, {0.4245115711001195, 1.065771532974499, 0.09876543209876543}, {0.5654088327734755, 0.963403680289306, 0.09876543209876543}, {0.6109114649112877, 0.5075141619791228, 0.2222222222222222}, {0.7415304098651706, 0.6872957162846667, 0.14814814814814814}, {0.7415304098651706, 0.8354438644328148, 0.09876543209876543}, {0.8824276715385266, 0.7330760117476218, 0.09876543209876543}, {0.8222573574213218, 0.4388437187846901, 0.14814814814814814}, {0.9631546190946778, 0.48462401424764523, 0.09876543209876543}, {0.9093366540572437, 0.31898934924766087, 0.09876543209876543}};

    double dy = 0.01;
    double r = data[0][2];
    double f = 2*r/dy;
    CircleDomain<Vec2d> domain3({data[0][0], data[0][1]}, r);
    domain3.fillUniform(M_PI/4*f*f, M_PI*f);

    for (int i = 1; i < data.size(); ++i) {
        auto& x = data[i];
        domain3.add(make_circle(x[0], x[1], x[2], dy));
    }

//      present(domain3);

    RectangleDomain<Vec2d> domain4({-2, -1}, {2, 1});
    double dy2 = 0.02;
    domain4.fillUniformWithStep(dy2, dy2);
    domain4.subtract(make_circle(-1, 0, 0.7, dy2));
    domain4.subtract(make_circle(1, 0, 0.7, dy2));
    domain4.add(make_circle(-0.7, 0.1, 0.5, dy2));
    domain4.add(make_circle(0.7, -0.1, 0.5, dy2));
//      present(domain4, 1e-3);

    prn("here");
    RectangleDomain<Vec3d> domain5(-1., 1.);
    double dy3 = 0.05;
    double r3 = 0.75;
    domain5.fillUniformWithStep(dy3, dy3);
    {
        CircleDomain<Vec3d> domain6({0, 0, 0}, r3);
        domain6.fillUniformBoundary(4*M_PI*r3*r3/dy3/dy3);
        domain5.subtract(domain6);
    }
    {
        CircleDomain<Vec3d> domain6({-1, 0, 0}, r3);
        domain6.fillUniformBoundary(4*M_PI*r3*r3/dy3/dy3);
        domain5.subtract(domain6);
    }
    {
        CircleDomain<Vec3d> domain6({1, 0, 0}, r3);
        domain6.fillUniformBoundary(4*M_PI*r3*r3/dy3/dy3);
        domain5.subtract(domain6);
    }

    VectorXd sol = solve3(domain5);
    HDF5IO file("data/poisson_weird3d_wip.h5", HDF5IO::DESTROY);
    file.openFolder("/calc");
    file.setFloatArray("sol", sol);
    file.setFloat2DArray("pos", domain5.positions);
    file.closeFile();


    return 0;
}
